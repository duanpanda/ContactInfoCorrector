* TODO Remove "," before "Street" and "Road"
* TODO Postal Code formatter
  - Ensure a space in Canadian postal codes
  - UPPERCASE
* TODO Fuzzy matching of city name, give suggestions
line 138: JonquiÃ¨re
line 383: La CaÃ±ada Flintridge
line 1173: ShÃ©diac
line 1488: QuÃ©bec
line 1677: Trois-RiviÃ¨res
* TODO Postal Code Locale
* TODO Province abbreviation
* DONE capitalize first name and last name
* DONE capitalize city
* DONE expand keywords in street
* DONE use city-province-country mapping to correct city, province and country fields
* TODO Complete city-province-country list
* TODO "N/A" city

* observations
** Name
capitalize (keep encoding, e.g. UTF8)

** street
capitalize each word
expand abbreviations

** city
capitalize

** province
abbreviate

** city-province-country correction
use mapping

* drafts
** solution 1: rule-based column batch operation
dataframe = import(xlsx)
df = dataframe.select(first_name, last_name, street, city, province, country, postal_code)
name_correcter = new NameCorrector()
name_correcter.add_rule(rule1)
name_correcter.add_rule(rule2)
df.first_name = name_correcter.apply_rules(df.first_name) // map or column batch operation
df.last_name = name_correcter.apply_rule(df.last_name)
address_correcter = new AddressCorrector()
address_correcter.add_rule(rule1)
address_correcter.add_rule(rule2)
Address orig_addr = new Address(df) // street, city, province, country, postal_code
Address new_addr = address_correcter.apply_rule(orig_addr)
df.street = new_addr.street
df.city = new_addr.city
...

** solution 2: loop and modify the dataframe in place
for each record
  first_name.capitalize
  last_name.capitalize
  street.capitalize
  make_addr_consistent(city, province, country, postal_code) // according to table

** decouple these things:
  - data source: xlsx, salesforce.com standard object, database => dataframe
  - output: xlsx, force.com object => dataframe
  - correctors (computation engine): it can modify the dataframe in place or do not modify anything but return new values (pure and reentrant functions, good for parralell computing)
